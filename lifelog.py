# -*- coding: utf-8 -*-
"""__main__.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19QVux4cQ6dq49RJmtfMcUbxksU1UbkY7
"""

# Commented out IPython magic to ensure Python compatibility.
# 구글 드라이브 안에 있는 데이터 활용하기 위해서 google drive와 연동시켜줍니다
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

"""--------------------------------------------------------------
--------------------------------------------------------------

## **사용방법**
1. '# matplotloib 한글 사용 위한 라이브러리'라는 주석이 달려있는 셀을 한 번 돌려줍니다.
2. 폴더를 생성하는 셀을 돌려 아래와 같은 폴더구조를 가지게 만들어줍니다.
3. 탭에서 Runtime > Restart Runtime을 선택하고 다시 코드를 실행할 준비를 합니다. 다시 코드를 실행시킬 때 1.에서 실행했던 셀은 실행하지 않습니다. 
4. 모든 셀을 실행시킨 후, 마지막 셀에서 개별 사용자 혹은 전체 사용자의 리포트를 생성합니다.
5. output>reports 폴더에서 리포트를 확인합니다.
"""

# matplotlib 한글 사용 위한 라이브러리
!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

# Commented out IPython magic to ensure Python compatibility.
# %cd '/gdrive/Shareddrives/프언구 팀플'  # path를 알맞게 바꿔줍니다. 
!mkdir output
# %cd output
!mkdir 1_programs
!mkdir 2_tv_time
!mkdir 3_sleep_time
!mkdir 4_eat_time
!mkdir nap_time
!mkdir ex_time
!mkdir reports
!mkdir title
!mkdir message
# %cd message
!mkdir activity
!mkdir sleep
!mkdir eat
# %cd ..

"""## **폴더구조**
 
 -TermProject
  - data
    - hs_g73_m08 (사용자 데이터 폴더)
    - user_profile.csv
  - ㅡㅡmainㅡㅡ.py
  - output
    - 1_programs
    - 2_tv_time
    - 3_sleep_time
    - 4_eat_time
    - nap_time
    - ex_time
    - reports
    - title
    - message
      - activity
      - sleep
      - eat

## **목차**
0.   프로그램 실행 준비
1.   활동

  (1)   참여 프로그램

  (2)   일자별 tv 시청 시간

  (3)   일자별 운동 시간


2.   수면

  (1)   전체 사용자 대비 평균 수면 시간

  (2)   낮잠 시간

3.   식사

  (1)   식사 규칙성

4.   이미지 생성 후 pdf 형식으로 보고서 제작하기

## **0. 프로그램 실행 준비**
"""

# PDF 보고서 작성시 필요한 라이브러리 설치
!pip install fpdf2
!pip install kaleido
!pip install dataframe_image
!pip install pandas

# 필요한 라이브러리 import 
import numpy as np
import pandas as pd
import os, sys
import matplotlib.pyplot as plt
plt.rc('font', family='NanumBarunGothic') 

# PDF 보고서 작성을 위해 필요한 라이브러리 import
from fpdf import FPDF

from datetime import timedelta
import math
import time
import datetime
import pandas as pd
import matplotlib.pyplot as plt
import dataframe_image as dfi
import matplotlib.dates as mdates
import matplotlib.dates as dates

# 텍스트 이미지화를 위한 라이브러리 import 
from PIL import Image, ImageDraw, ImageFont
import textwrap

user_profile = pd.read_csv('/gdrive/MyDrive/data/user_profile.csv') # path를 알맞게 바꿔줍니다. data 폴더로 설정
user_profile=user_profile.set_index("id", drop = True)

# 각 csv 이름들 list화
path = '/gdrive/MyDrive/data/hs_g73_m08' # path 는 알맞게 바꿔줍니다. hs_g73_m08 폴더로 설정
file_list = os.listdir(path)
csv_list = [file for file in file_list if file.endswith('.csv')]

# 전체 사용자
lists = []
for i in range(len(csv_list)):
  data = pd.read_csv(path + "/"+csv_list[i], engine = 'python', encoding = 'CP949')
  lists.append(data)
full = pd.concat(lists)

# id_list = [228, 230, ~]
id_list=[]
for i in range(0, len(csv_list)):
  id_list.append(int(csv_list[i].split('_')[1]))
  
# 오름차순 정렬
id_list.sort()

# 텍스트 이미지 생성
def make_image(title, message, color):

    # Image size
    W = 800
    H = 25

    # Text wraper to handle long text
	  # 40자를 넘어갈 경우 여러 줄로 나눔
    lines = textwrap.wrap(message, width = 100)
    if len(lines) > 1:
      for i in range(len(lines)):
        H += 15

    # font setting
    font = ImageFont.truetype('NanumBarunGothic.ttf', size=13)
    font_color = 'rgb(0, 0, 0)' # or just 'black'
    
    image = Image.new('RGB', (W, H), color)
    draw = ImageDraw.Draw(image)
    
    
  
    # start position for text
    x_text = 10
    y_text = 5
    
    # 각 줄의 내용을 적음
    for line in lines:
        width, height = font.getsize(line)
        draw.text((x_text, y_text), line, font=font, fill=font_color)
        y_text += height
        # height는 글씨의 높이로, 한 줄 적고 나서 height만큼 아래에 다음 줄을 적음
        
    # 안에 적은 내용을 파일 이름으로 저장
    image.save(title + '.png'.format(message), dpi = (1200,1200))
    

# 실행
cwd = os.getcwd()

make_image(cwd + "/title/"+"1. 활동","1. 활동", (200, 200, 200)) 
make_image(cwd + "/title/" + "2. 수면", "2, 수면", (200, 200, 200))
make_image(cwd + "/title/" + "3. 식사", "3.식사", (200, 200, 200))

# 메세지 삭제
full_dropped = full.drop(columns=['STT_1','STT_2', 'STT_3', 'Message_2', 'Message_3', 'Message_1', 'Keyword', 'Sequence'])
full_dropped.sort_values(by=['owner_id'], axis=0)

# 시간, datetime 관련 컬럼들 추가
full_dropped['Time'] = pd.to_datetime(full_dropped['Time'])
full_dropped['H'] = full_dropped['Time'].dt.hour
full_dropped['M'] = full_dropped['Time'].dt.minute
full_dropped['Date'] = full_dropped['Time'].dt.date        
full_dropped['T'] = full_dropped['Time'] - full_dropped['Time'].dt.normalize()
full_dropped['endTime'] = full_dropped['Time']
full_dropped['endTime'] = full_dropped['endTime'].shift(-1)
full_dropped['TimeDelta'] = full_dropped['endTime'] - full_dropped['Time']
full_dropped['Duration'] = full_dropped['TimeDelta'].dt.total_seconds()

"""## 1. 활동

(1) 참여 프로그램
"""

def programs(id_in):
  activity = full_dropped.loc[(full_dropped['Z'] == '프로그램')]
  user = activity.loc[activity['owner_id'] == id_in]
  y = user['State'].value_counts(sort=False)

  #  프로그램 참여 내역에 알맞는 메세지
  if sum(y) == 0:
    message = "프로그램에 참여하지 않았습니다."
    make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_프로그램메세지_1", message, (255, 255, 255))

  else:
    message = str(user['State'].tolist()) + "에 참여했습니다."
    make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_프로그램메세지_1", message, (255, 255, 255))

    message = "가장 많이 참여한 프로그램은" + str(user['State'].mode().tolist()) + "입니다."
    make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_프로그램메세지_2", message, (255, 255, 255))

    y.plot(kind = 'bar', color='green', linestyle='dashed', linewidth=2)
    yint = range(0, math.ceil(max(y))+1)
    plt.yticks(yint, fontsize = 12)
    plt.xticks(rotation = 35, fontsize= 12)
    plt.title('참여 프로그램 종류와 빈도', fontsize = 15) 
    plt.tight_layout()
    cwd = os.getcwd()
    plt.savefig(cwd + '/1_programs/' + str(id_in) + '_1_programs.png', dpi=300, pad_inches=20)

"""(2) 일자별 TV 시청 시간"""

def tv_time(id_in):
  user = full_dropped.loc[full_dropped['owner_id'] == id_in]
  total_dur = timedelta(seconds=0)
  tv_dur = {'date': [],
          'tv': [] }
  count = -1

  for index, row in user.iterrows():
    if row['Date'] not in tv_dur['date']:
      count += 1
      tv_dur['date'].append(row['Date'])
      tv_dur['tv'].append(total_dur)
    if (row['Z'] == '리모콘'):
      tv_dur['tv'][count] += row['TimeDelta']
  
  tv_dur_df = pd.DataFrame(tv_dur)
  notv = datetime.timedelta(seconds = 0)


  # tv 시청 내역이 없는 경우
  if (tv_dur_df['tv'].sum() == notv) or (tv_dur_df.shape[0] == 0):
    message = "TV를 시청하지 않으셨습니다."
    make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_tv메세지_1", message, (255, 255, 255))

  else:
    message = "일자별 tv 시청시간 내역입니다."
    make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_tv메세지_1", message, (255, 255, 255))


    # 예외 시간 처리 위한 평균값 계산
    m = tv_dur_df.loc[(tv_dur_df['tv'] < timedelta(hours = 24)) & (tv_dur_df['tv'] >= timedelta(seconds = 0))]
    tvmean = m['tv'].mean()

    # 24시간이 넘어가는 기록이 있는 경우 -> 평균값으로 대체
    tv_dur_df.loc[tv_dur_df['tv'] >= timedelta(hours = 24), 'tv'] = tvmean

    # 0시간 이하인 경우 -> 평균값으로 대체
    tv_dur_df.loc[tv_dur_df['tv'] < timedelta(seconds = 0), 'tv'] = tvmean

    # tv 평균 시청 시간에 따른 적절한 메세지 
    if tvmean >= timedelta(hours = 10):
      message = "TV를 너무 오래 보는 것은 건강에 해롭습니다. 조금씩 줄여봅시다."
      make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_tv메세지_2", message, (255, 255, 255))
    elif tvmean >= timedelta(hours = 6):
      message = "TV 시청 시간이 긴 편이시군요. 운동 혹은 그 이외의 새로운 취미를 만들어 보세요."
      make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_tv메세지_2", message, (255, 255, 255))
    elif tvmean >= timedelta(hours = 3):
      message = "눈 건강을 위해 TV 시청 시간을 적절히 조절합시다."
      make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_tv메세지_2", message, (255, 255, 255))
    else: 
      message = "TV 시청 대신 다른 취미를 만들어보는 건 어떨까요?"
      make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_tv메세지_2", message, (255, 255, 255))


    fig = plt.figure()                                                                                                                                                                                                                                                             
    ax = fig.add_subplot(1,1,1)   

    x = tv_dur_df['date']
    y = tv_dur_df['tv']

    zero = datetime.datetime(1,1,1)
    time = [zero + t for t in y]
    zero = mdates.date2num(zero)
    y = [t-zero for t in mdates.date2num(time)]

    ax.bar(x, y, bottom = zero)
    ax.yaxis_date()
    ax.yaxis.set_major_formatter(mdates.DateFormatter("%H"))

    # add 10% margin on top (since ax.margins seems to not work here)
    ylim = ax.get_ylim()
    ax.set_ylim(None, ylim[1]+0.1*np.diff(ylim))
    plt.xticks(rotation=60)      
    
    plt.title('일별 TV 시청 시간', fontsize = 15) 
    ax.set_xlabel('날짜',fontsize = 12) # xlabel
    ax.set_ylabel('시간', fontsize = 12) # ylabel

    plt.tight_layout() 
    cwd = os.getcwd()
    plt.savefig(cwd + '/2_tv_time/' + str(id_in) + '_tv_time.png', dpi=300, pad_inches=20)

"""(3) 일자별 운동 시간"""

def exercise(id_in):
  user = full_dropped.loc[full_dropped['owner_id'] == id_in]
  total_dur = timedelta(seconds=0)
  ex_dur = {'date': [],
          'ex': [] }
  count = -1

  for index, row in user.iterrows():
    if row['Date'] not in ex_dur['date']:
      count += 1
      ex_dur['date'].append(row['Date'])
      ex_dur['ex'].append(total_dur)
    if (row['Act'] == '실내운동' or row['Act'] == '실외운동'):
      ex_dur['ex'][count] += row['TimeDelta']
  
  ex_df = pd.DataFrame(ex_dur)
  noex = datetime.timedelta(seconds = 0)

  # 예외 시간 처리 위한 평균값 계산
  m = ex_df.loc[(ex_df['ex'] < timedelta(hours = 24)) & (ex_df['ex'] >= timedelta(seconds = 0))]
  exmean = m['ex'].mean()

  # 24시간이 넘어가는 기록이 있는 경우 -> 평균값으로 대체
  ex_df.loc[ex_df['ex'] >= timedelta(hours = 24), 'ex'] = exmean

  # 0시간 이하인 경우 -> 평균값으로 대체
  ex_df.loc[ex_df['ex'] < timedelta(seconds = 0), 'ex'] = exmean


  # 운동 내역이 없는 경우
  if (ex_df['ex'].sum() == noex) or (ex_df.shape[0] == 0):
    message = "운동 내역이 없습니다."
    make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_운동메세지_1", message, (255, 255, 255))

  else:
    message = "일자별 운동 내역입니다."
    make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_운동메세지_1", message, (255, 255, 255))
    exmean = ex_df['ex'].mean()

    # 운동 시간에 따른 적절한 메세지 
    if exmean >= timedelta(hours = 4):
      message = "너무 무리해서 운동하지 않도록 주의합시다."
      make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_운동메세지_2", message, (255, 255, 255))
    elif exmean >= timedelta(minutes = 30):
      message = "앞으로도 계속해서 꾸준히 운동합시다."
      make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_운동메세지_2", message, (255, 255, 255))
    else: 
      message = "꾸준한 운동을 통해 체력을 기르는 것이 필요합니다."
      make_image(os.getcwd() + "/message/activity/" + str(id_in)+"_운동메세지_2", message, (255, 255, 255))


    fig = plt.figure()                                                                                                                                                                                                                                                             
    ax = fig.add_subplot(1,1,1) 

    x = ex_df['date']
    y = ex_df['ex']

    zero = datetime.datetime(1,1,1)
    time = [zero + t for t in y]
    zero = mdates.date2num(zero)
    y = [t-zero for t in mdates.date2num(time)]

    ax.bar(x, y, bottom = zero)
    ax.yaxis_date()
    ax.yaxis.set_major_formatter(mdates.DateFormatter("%H"))

    # add 10% margin on top (since ax.margins seems to not work here)
    ylim = ax.get_ylim()
    ax.set_ylim(None, ylim[1]+0.1*np.diff(ylim))
    plt.xticks(rotation=60)  
    
    plt.title('일별 운동 시간', fontsize = 15) 
    ax.set_xlabel('날짜',fontsize = 12) #xlabel
    ax.set_ylabel('시간', fontsize = 12)#ylabel

    plt.tight_layout() 
    cwd = os.getcwd()
    plt.savefig(cwd + '/ex_time/' + str(id_in) + '_ex_time.png', dpi=300, pad_inches=20)

"""## 2. 수면

(1) (전체 사용자 대비) 사용자 평균 수면 시간
"""

sleep_array = [[], []]

for k in range (0, len(id_list)):

  data = full_dropped.loc[full_dropped['owner_id'] == id_list[k]]
  data['Time'] = pd.to_datetime(data['Time'])

  sleep_array[0].append(id_list[k])

  wk_up=[]
  sleep=[]

  # 기기에서 파악된 기상 취침시간 정렬
  for i in range(0, len(data)):
    if '기상' in data['Act'][i] and (int(data['Time'][i].hour) >= 6 and int(data['Time'][i].hour) <= 10):
      wk_up.append(data['Time'][i])
    elif '취침' in data['Act'][i] and (int(data['Time'][i].hour) >= 19 or int(data['Time'][i].hour) <= 2):
      sleep.append(data['Time'][i])
  sleep_time=[]
  for_mean=[]

  # 기기 오류나 낮잠등을 제외하고 실제 사용자가 수면했을법한 시간
  for i in range(0, len(sleep)):
    for j in range(0, len(wk_up)):
      if (wk_up[j] - sleep[i]).seconds / 3600 >= 4 and (wk_up[j] - sleep[i]).seconds / 3600 <= 15 and (wk_up[j] - sleep[i]).days == 0:
        sleep_time.append(wk_up[j] - sleep[i])
        if wk_up[j] - sleep[i] != 0:
          for_mean.append(wk_up[j] - sleep[i])

  # 평균 수면 시간
  s = pd.Series(sleep_time).mean()
  sleep_array[1].append(s)

# 전체 평균 수면시간
sleep_people = []

for i in sleep_array[1]:
  if i != 0:
    sleep_people.append(i)

all_sleap_mean = pd.Series(sleep_people).mean()

# id 입력시 그래프 예시
# 왼쪽이 사용자 한 달 평균 수면시간 오른쪽 전체 사용자 평균 수면시간

def sleep_compare(id_in):

  y_sleep = [sleep_array[1][sleep_array[0].index(id_in)], all_sleap_mean]
  x_sleep = [str(id_in), 'Mean']

  sleep_data = {'user' : x_sleep, 'time' : y_sleep}
  sleepdf = pd.DataFrame(sleep_data)

  # 수면 시간에 따른 적절한 메세지

  # 수면 기록 없는 경우
  if sleepdf['time'].isnull().shape[0] > 0:
    message = "(낮잠 제외) 수면 기록이 없습니다."
    make_image(os.getcwd() + "/message/sleep/" + str(id_in)+"_수면메세지_1", message, (255, 255, 255))

  else:
    message = "전체 사용자 대비 평균 수면 시간입니다."
    make_image(os.getcwd() + "/message/sleep/" + str(id_in)+"_수면메세지_1", message, (255, 255, 255))

    fig = plt.figure()                                                                                                                                                                                                                                                             
    ax = fig.add_subplot(1,1,1)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
    x = sleepdf['user']
    y = sleepdf['time']

    zero = datetime.datetime(1,1,1)
    time = [zero + t for t in y]
    zero = mdates.date2num(zero)
    y = [t-zero for t in mdates.date2num(time)]

    ax.bar(x, y, bottom = zero)
    ax.yaxis_date()
    ax.yaxis.set_major_formatter(mdates.DateFormatter("%H"))

    # add 10% margin on top (since ax.margins seems to not work here)
    ylim = ax.get_ylim()
    ax.set_ylim(None, ylim[1]+0.1*np.diff(ylim))
    plt.xticks([], [])

    ax.set_xticks([])
    # for minor ticks
    ax.set_xticks([], minor=True)

    plt.ylabel('수면 시간', fontsize = 12)
    plt.xlabel('사용자 평균                             전체 사용자 평균', fontsize = 12)  
  
    plt.title('전체 사용자 대비 평균 수면 시간', fontsize =  15) 
    plt.tight_layout()                                                                                                                                                                                                                                                       
    cwd = os.getcwd()
    plt.savefig(cwd + '/3_sleep_time/' + str(id_in) + '_sleep_time.png', dpi=300, pad_inches=10)

"""(2) 낮잠 시간"""

def nap(id_in):
  user = full_dropped.loc[full_dropped['owner_id'] == id_in]
  total_dur = timedelta(seconds=0)
  nap_dur = {'date': [],
          'nap': [] }
  count = -1

  for index, row in user.iterrows():
    if row['Date'] not in nap_dur['date']:
      count += 1
      nap_dur['date'].append(row['Date'])
      nap_dur['nap'].append(total_dur)
    if (row['Act'] == '낮잠'):
      nap_dur['nap'][count] += row['TimeDelta']

  
  nap_df = pd.DataFrame(nap_dur)
  nonap = datetime.timedelta(seconds = 0)

  napmean = nap_df['nap'].mean()

  # 예외 시간 처리 위한 평균값 계산
  m = nap_df.loc[(nap_df['nap'] < timedelta(hours = 24)) & (nap_df['nap'] >= timedelta(seconds = 0))]
  napmean = m['nap'].mean()

  # 24시간이 넘어가는 기록이 있는 경우 -> 평균값으로 대체
  nap_df.loc[nap_df['nap'] >= timedelta(hours = 24), 'nap'] = napmean

  # 0시간 이하인 경우 -> 평균값으로 대체
  nap_df.loc[nap_df['nap'] < timedelta(seconds = 0), 'nap'] = napmean
    

  # 낮잠 내역이 없는 경우
  if (nap_df['nap'].sum() == nonap) or (nap_df.shape[0] == 0):
    message = "낮잠을 주무시지 않았습니다."
    make_image(os.getcwd() + "/message/sleep/" + str(id_in)+"_낮잠메세지_1", message, (255, 255, 255))

  else:
    message = "일자별 낮잠 시간 내역입니다."
    make_image(os.getcwd() + "/message/sleep/" + str(id_in)+"_낮잠메세지_1", message, (255, 255, 255))

    # 낮잠 시간에 따른 적절한 메세지 
    if napmean >= timedelta(hours = 3):
      message = "낮잠을 유독 많이 주무시네요. 마지막 건강 검진이 언제셨나요?"
      make_image(os.getcwd() + "/message/sleep/" + str(id_in)+"_낮잠메세지_2", message, (255, 255, 255))
    else: 
      message = ""
      make_image(os.getcwd() + "/message/sleep/" + str(id_in)+"_낮잠메세지_2", message, (255, 255, 255))

    fig = plt.figure()                                                                                                                                                                                                                                                             
    ax = fig.add_subplot(1,1,1)   

    x = nap_df['date']
    y = nap_df['nap']

    zero = datetime.datetime(1,1,1)
    time = [zero + t for t in y]
    zero = mdates.date2num(zero)
    y = [t-zero for t in mdates.date2num(time)]

    ax.bar(x, y, bottom = zero)
    ax.yaxis_date()
    ax.yaxis.set_major_formatter(mdates.DateFormatter("%H"))

    # add 10% margin on top (since ax.margins seems to not work here)
    ylim = ax.get_ylim()
    ax.set_ylim(None, ylim[1]+0.1*np.diff(ylim))
    plt.xticks(rotation=60)      
    
    plt.title('일별 낮잠 시간', fontsize = 15) 
    ax.set_xlabel('날짜',fontsize = 12) #xlabel
    ax.set_ylabel('시간', fontsize = 12)#ylabel

    plt.tight_layout() 
    cwd = os.getcwd()
    plt.savefig(cwd + '/nap_time/' + str(id_in) + '_nap_time.png', dpi=300, pad_inches=20)

"""## 3. 식사

(1) 식사 규칙성
"""

def eat_time(id_in):
  
  data_eat = full_dropped.loc[full_dropped['owner_id'] == id_in]
  data_eat = data_eat.loc[(data_eat['Act'] == '아침식사' )| (data_eat['Act'] == '점심식사') | 
                          (data_eat['Act'] == '저녁식사') | (data_eat['Act'] == '간식')]

  cwd = os.getcwd()

  if data_eat.shape[0]  == 0:
    message = "식사 기록이 없습니다."
    make_image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_0", message, (255, 255, 255))

  else:
    count_each = data_eat['Act'].value_counts(normalize = True)
    count_each = count_each.to_frame()

    total = data_eat['Act'].count()
    rat = data_eat['Act'].value_counts(normalize = True)
    rat = rat.to_frame()
    rat = rat.reset_index()
    rat.columns = ['index', 'perc'] # change column names
    ratio = rat['perc']
    labels = rat['index']

    colors = ['#ff9999', '#ffc000', '#8fd9b6', '#d395d0']
    wedgeprops={'width': 0.5, 'edgecolor': 'w', 'linewidth': 5}

    fig = plt.figure()                                                                                                                                                                                                                                                             
    ax = fig.add_subplot(1,1,1)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               

    ax.pie(ratio, labels=labels, autopct='%.1f%%', startangle=90, counterclock=False, colors=colors, wedgeprops=wedgeprops)
    plt.title('식사 종류와 비중', fontsize = 15) 

    plt.tight_layout()
    plt.savefig(cwd + '/4_eat_time/' + str(id_in) + '_eat_time.png', dpi=300, pad_inches=10)

    sub = rat.set_index("index", drop = True)

    
    
    # 적절한 메세지 출력
    try:
      if sub.at["간식", "perc"] > 0.5:
        message = "식사보다 간식이 잦으시군요! 규칙적이고 건강한 식사를 위해서 간식은 적당히 드시는 게 좋겠습니다."
        make_image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_1", message, (255, 255, 255))
      elif sub.at["간식", "perc"] > 0.3:
        message = "간식의 양은 계속해서 적당히 유지하고, 되도록이면 건강한 간식 위주로 드셔보세요."
        make_image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_1", message, (255, 255, 255))

    except KeyError:
      message = "간식을 전혀 드시지 않으시네요. 견과류나 과일같은 간식은 에너지 보충에 도움이 됩니다."
      make_image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_1", message, (255, 255, 255))


    try:
      if sub.at["저녁식사", 'perc'] - sub.at["아침식사", 'perc'] > 0.04:
        message = "아침식사를 거르고 계시지는 않은가요? 아침을 잘 챙겨먹는 것이 건강에 좋습니다."
        make_image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_2", message, (255, 255, 255))
      else:
        message = "앞으로도 아침식사와 저녁식사를 잘 챙겨드세요."
        make_image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_2", message, (255, 255, 255))

    except KeyError:
      try: 
        key = sub.at["저녁식사", 'perc'] 
        message = "아침식사를 잘 챙겨먹는 것이 건강에 좋습니다."
        make_image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_2", message, (255, 255, 255))

      except: 
        try:
          key = sub.at["아침식사", "perc"]
          message = "저녁식사를 잘 챙겨드시는 게 건강에 좋습니다."
          make_image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_2", message, (255, 255, 255))
        except:
          message = "아침식사와 저녁식사를 잘 챙겨드시는 게 건강에 좋습니다."
          make_image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_2", message, (255, 255, 255))

"""## 4. 이미지 생성 후 pdf 형식으로 보고서 제작하기"""

def create_images(id_in):
  programs(id_in)
  tv_time(id_in)
  exercise(id_in)
  sleep_compare(id_in)
  nap(id_in)
  eat_time(id_in)
  create_report(id_in)

class PDF(FPDF):
  
    def footer(self):
        self.set_y(-15)
        self.add_font('NanumBarunGothic', '', fname = '/gdrive/Shareddrives/프언구 팀플/NanumBarunGothic.ttf', uni=True)
        self.add_font('NanumBarunGothicBold', '', fname = '/gdrive/Shareddrives/프언구 팀플/NanumBarunGothicBold.ttf', uni=True)
        self.set_font('NanumBarunGothic', '', 8) 
        self.set_text_color(128)
        self.cell(0, 10, 'Page ' + str(self.page_no()), 0, 0, 'C')

def create_title(title, pdf, id_in):
    title = title.encode('cp949', 'replace').decode('latin-1')
    # Add main title
    pdf.add_font('NanumBarunGothic', 'B', fname = '/gdrive/Shareddrives/프언구 팀플/NanumBarunGothicBold.ttf', uni=True)
    pdf.set_font('NanumBarunGothic', 'B', 20)  
    pdf.ln(5)
    pdf.write(5, title)
    pdf.ln(10)
    
    # Add date of report
    pdf.add_font('NanumBarunGothic', '', fname = '/gdrive/Shareddrives/프언구 팀플/NanumBarunGothic.ttf', uni=True)
    pdf.set_font('NanumBarunGothic', '', 14)
    pdf.set_text_color(r=128,g=128,b=128)
    
    pdf.write(8, 'ID: ' + str(id_in) + '\t' + 'AGE: ' + str(user_profile.at[id_in, 'age']) + 
              '\t' + 'SEX: ' +str(user_profile.at[id_in, 'sex']))
    
    # Add line break
    pdf.ln(10)

def write_to_pdf(pdf, words):
    words = words.encode('cp949','replace').decode('latin-1')
    # Set text colour, font size, and font type
    pdf.set_text_color(r=0,g=0,b=0)
    pdf.add_font('NanumBarunGothic', '', fname = '/gdrive/Shareddrives/프언구 팀플/NanumBarunGothic.ttf', uni=True)
    pdf.set_font('NanumBarunGothic', '', 12)
    
    pdf.write(5, words)

def create_report(id_in):
  TITLE = "SOONI REPORT"
  WIDTH = 210
  HEIGHT = 297

  pdf = PDF()

  # ADD Page
  pdf.add_page()
  create_title(TITLE, pdf, id_in)

  cwd = os.getcwd()


  # activity title
  pdf.image(cwd + "/title/1. 활동.png", w = 190) 

  # programs
  try:
    pdf.image(cwd + '/1_programs/'+ str(id_in) + '_1_programs.png',55 ,w=100)
    pdf.image(cwd+ "/message/activity/" + str(id_in)+"_프로그램메세지_1.png", w = 190)
    pdf.image(cwd+ "/message/activity/" + str(id_in)+"_프로그램메세지_2.png", w =190)
  except FileNotFoundError:
    pdf.image(cwd+ "/message/activity/" + str(id_in)+"_프로그램메세지_1.png", w = 190)

  # tv_time
  try:
    pdf.image(cwd + '/2_tv_time/'+ str(id_in) + '_tv_time.png',55, w=100)
    pdf.image(cwd + '/message/activity/' + str(id_in) + "_tv메세지_1.png", w = 190)
    pdf.image(cwd + '/message/activity/' + str(id_in) + "_tv메세지_2.png", w = 190)
  except FileNotFoundError:
    pdf.image(cwd + '/message/activity/' + str(id_in) + "_tv메세지_1.png", w = 190)

  # exercise
  try:
    pdf.image(cwd + '/ex_time/'+ str(id_in) + '_ex_time.png',55, w=100)
    pdf.image(cwd + '/message/activity/' + str(id_in) + "_운동메세지_1.png", w = 190)
    pdf.image(cwd + '/message/activity/' + str(id_in) + "_운동메세지_2.png", w = 190)
  except FileNotFoundError:
    pdf.image(cwd + '/message/activity/' + str(id_in) + "_운동메세지_1.png", w = 190)

  

  # sleep title
  pdf.image(cwd+"/title/" + "2. 수면.png", w = 190)

  # sleep
  try:
    pdf.image(cwd + '/3_sleep_time/'+ str(id_in) + '_sleep_time.png',55, w=100)
    pdf.image(cwd + "/message/sleep/" + str(id_in)+"_수면메세지_1.png", w = 190)
  except FileNotFoundError:
    pdf.image(cwd + "/message/sleep/" + str(id_in)+"_수면메세지_1.png", w = 190)

  
  # nap
  try:
    pdf.image(cwd + '/nap_time/' + str(id_in) + '_nap_time.png', 55, w= 100)
    pdf.image(cwd + "/message/sleep/" + str(id_in)+"_낮잠메세지_1.png", w = 190)
    pdf.image(cwd + "/message/sleep/" + str(id_in)+"_낮잠메세지_2.png", w = 190)
  except FileNotFoundError:
    pdf.image(cwd + "/message/sleep/" + str(id_in)+"_낮잠메세지_1.png", w = 190)


  # eat title
  pdf.image(cwd + "/title/" + "3. 식사.png", w = 190)

  # eat
  try:
    pdf.image(cwd + '/4_eat_time/'+ str(id_in) + '_eat_time.png',55, w=100)
    pdf.image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_1.png", w = 190)
    pdf.image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_2.png", w = 190)
  except FileNotFoundError:
    pdf.image(cwd + "/message/eat/" + str(id_in)+"_식사메세지_0.png", w = 190)


  pdf.output(cwd + "/reports/" + str(id_in) + '_report.pdf','F')

# 아래 함수에 아이디 인덱스로 입력 id_list[0] 혹은 직접 입력 (ex) 276
create_images(id_list[1])